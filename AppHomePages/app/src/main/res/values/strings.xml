<resources>
    <string name="app_name">Algorithm Visualizer</string>
    <string name="depth_name">Depth First Search</string>
    <string name="breadth_name">Breadth First Search</string>
    <string name="topological_name">Topological Ordering</string>

    <string name="title_activity_depth_first_search">Depth First Search</string>
    <string name="title_activity_breadth_first_search">Breadth First Search</string>
    <string name="title_activity_topological_ordering">Topological Ordering</string>

    <!-- Button Titles -->
    <string name="sorting_button">Sorting Algorithms</string>
    <string name="searching_button">Searching Algorithms</string>
    <string name="generate_button">Generate</string>
    <string name="instructions_button">Instructions</string>
    <string name="correctness_button">Correctness Proof</string>
    <string name="start_button">Start</string>
    <string name="stop_button">Stop</string>
    <string name="rewind_button">Rewind</string>
    <string name="target_button">Target</string>
    <string name="button_depth_first">Depth First Search</string>
    <string name="button_breadth_first">Breadth First Search</string>
    <string name="button_topological_ordering">Topological Ordering</string>
    <string name="button_graph_algorithms">Graph Algorithms</string>
    <string name="button_greedy_algorithms">Greedy Algorithms</string>
    <string name="button_dp_algorithms">Dynamic Programing Algorithms</string>
    <string name="button_close_instructions">Close Instructions</string>

    <!-- Instructions Strings -->
    <string name="LinearSearchInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new array, then select the \"Generate\" button. This will cause an array of a size between one and ten filled with random values to show up on the screen. The generated value in the drop-down is the one sought in the animation. If the algorithm is searching for an element not in the array, then \"Not Found\" will show. If you would like to change this value, then select another value from the drop-down. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. \n\n
        The array will start as a dark blue color. As elements are checked for equality with the value sought, then they will turn light blue. Finally, if the value sought is found it will turn pink.\n </string>

    <string name="BinarySearchInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new array, then select the \"Generate\" button. This will cause an array of a size between one and ten filled with random values to show up on the screen. The generated value in the drop-down is the one sought in the animation. If the algorithm is searching for an element not in the array, then \"Not Found\" will show. If you would like to change this value, then select another value from the drop-down. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. \n\n
        The array will start as a dark blue color. As elements are checked for equality with the value sought, then they will turn light blue. Finally, if the value sought is found it will turn pink.\n </string>

    <string name="BubbleSortInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new array, then select the \"Generate\" button. This will cause an array of a size between one and ten filled with random values to show up on the screen. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. \n\n
        The array will start as a dark blue color. Elements will be selected in pairs for comparison and swapped if the value on the right is smaller than the value on the left. Then, once the array is sorted, it will turn light blue.\n </string>

    <string name="InsertionSortInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new array, then select the \"Generate\" button. This will cause an array of a size between one and ten filled with random values to show up on the screen. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. \n\n
        The array will start as a dark blue color. The sorted portion of the array will be displayed in light blue. Selected elements to insert into the array will turn pink, then inserted in pink to their correct location in the array. Finally, the sorted array will be displayed in light blue.\n </string>

    <string name="SelectionSortInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new array, then select the \"Generate\" button. This will cause an array of a size between one and ten filled with random values to show up on the screen. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. \n\n
        The array will start as a dark blue color. The sorted portion of the array will be displayed in light blue. The elements in the unsorted portion of the array will be scanned in pink. The next largest element will be highlighted pink. Finally, the next largest element will turn light blue when it is placed into its proper location in the sorted array.\n </string>

    <string name="MergeSortInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new array, then select the \"Generate\" button. This will cause an array of either 1, 5, 6, or 8 to be generated. If unsatisfied with the generated size, select the size of array you would like to sort from the drop-down. Next, click \"Start\" to begin the animation. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so.\n\n
        The array will start as a dark blue color. The sorted array will turn light blue.\n </string>

    <string name="QuickSortInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new array, then select the \"Generate\" button. This will cause an array of a size between one and ten filled with random values to show up on the screen. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. \n\n
        The array will start as a dark blue color. The pivot value will be selected in pink. The portion of the array being viewed/in focus will be highlighted in light blue. The elements being compared to the pivot will turn green. Finally, the sorted array will turn light blue.\n </string>

    <string name="DepthFirstSearchInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new graph, then select the \"Generate\" button. This will cause a graph filled with random values to show up on the screen. The generated value in the drop-down is the one sought in the animation. If the algorithm is searching for an element not in the graph, then \"Not Found\" will show. If you would like to change this value, then select another value from the drop-down. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. \n\n
        The graph will start as a dark blue color. The node being examined will turn light blue. If the element is found, then it will turn pink.\n </string>

    <string name="BreadthFirstSearchInstructions">To start the animation, select the \"Start\" button. If you would like to generate a new graph, then select the \"Generate\" button. This will cause a graph filled with random values to show up on the screen. The generated value in the drop-down is the one sought in the animation. If the algorithm is searching for an element not in the graph, then \"Not Found\" will show. If you would like to change this value, then select another value from the drop-down. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. \n\n
        The graph will start as a dark blue color. The node being examined will turn light blue. If the element is found, then it will turn pink.\n </string>

    <string name="TopologicalOrderingInstructions"> To start the animation, select the \"Start\" button. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. To restart the animation after it is done, click \"Rewind\" and then \"Start\".\n\n
        The graph will start as a dark blue color. The node chosen in the ordering will turn light blue. The final state will show the graph with the ordering value to the right in parentheses.\n </string>

    <string name="DijkstrasInstructions"> To start the animation, select the \"Start\" button. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. To restart the animation after it is done, click \"Rewind\" and then \"Start\".\n\n
        The nodes being examined for the minimum will turn purple. The current node will turn green. The nodes being potentially updated with shorter distances will turn pink. Marked nodes turn light blue.\n </string>

    <string name="LevenshteinInstructions">To start the animation, select the \"Start\" button. If you would like to go back to the beginning of the animation, then click the \"Rewind\" button. If you would like to stop on a certain frame, then use the \"Stop\" button to do so. To restart the animation after it is done, click \"Rewind\" and then \"Start\".\n\n
        The table will begin as a dark blue color. The nodes being updated with values will turn pink. The values being compared for minimums will turn green.\n </string>

    <!-- Description Strings -->
    <string name="LinearSearchDescription">Linear search is an O(n) algorithm that looks through all the elements in an unsorted array for a specific value. This is like looking for a specific assignment in a stack of unsorted school papers that accumulated at the bottom of your backpack. You have to look through all the papers to see if the specific paper is in the stack. </string>

    <string name="BinarySearchDescription">Binary search is an O(log n) algorithm that looks through all the elements in a presorted array for a specific value. The runtime comes from the fact that, because the array is ordered, half of the array can be discarded at each step. This is because we can determine in which half the value should be found, if it is in the array. </string>

    <string name="BubbleSortDescription">Bubble sort is an O(n^2) algorithm where values are swapped in pairs and, at each step, the largest values \"bubble\" to the rightmost side of the array. The array ends up sorted at the end. </string>

    <string name="InsertionSortDescription">Insertion sort is an O(n^2) algorithm where the first element is regarded as sorted. Then, each element in the array is selected and inserted into the correct location in the sorted array. This algorithm is similar to organizing a hand of cards starting with one card. Then, selecting additional cards and inserting them into the correct location in the hand one-by-one. At the end, you have a sorted array or, in our example, a hand of cards. </string>

    <string name="SelectionSortDescription">Selection sort is an O(n^2) algorithm where the next smallest element from an unsorted portion of an array is selected and inserted into the sorted portion of the array. This is similar to sorting a group of coins from a mixed up pile. First, all pennies would be picked out and sorted, next all nickels, then dimes, and, finally, quarters. </string>

    <string name="MergeSortDescription">Merge sort is an O(n (log n)) algorithm where the array is broken into pieces recursively with a base case of 1 element, which is automatically sorted. Sorted halves are merged together repeatedly until a sorted array is built. </string>

    <string name="QuickSortDescription">Quicksort is an O(n (log n)) recursive algorithm using a pivot. Elements are organized on the left side of the pivot if they are smaller than or equal to the pivot and on the right if they are greater than the pivot. At the end of the round, the pivot is placed into its proper sorted location. Through recursion, the array ends up sorted. </string>

    <string name="DepthFirstSearchDescription">Depth-first search is an O(|V| + |E|) algorithm where |V| is the number of vertices in the graph and |E| is the number of edges. This algorithm uses a Stack to explore farthest down a path in a graph before backtracking. If no element is being sought, the depth-first search becomes a depth-first traversal of the graph. </string>

    <string name="BreadthFirstSearchDescription">Breadth-first search is an O(|V| + |E|) algorithm where |V| is the number of vertices in the graph and |E| is the number of edges. This algorithm uses a Queue to explore the layers of a graph. If no element is being sought, the breadth-first search becomes a breadth-first traversal of the graph where each layer of the graph is traversed. </string>

    <string name="TopologicalOrderingDescription">Topological ordering is commonly an O(|V| + |E|) algorithm where |V| is the number of vertices in the graph and |E| is the number of edges. Topological ordering is useful whenever there are dependencies between events or items that need to be ordered. For example, course scheduling, cooking recipes, and getting dressed are all scenarios where some steps must come before others and different pieces of the data are interconnected. </string>

    <string name="DijkstrasDescription">The displayed version of Dijkstra\'s algorithm is an O(|V|^2) algorithm. In Dijkstra\'s, the shortest path from a source node to all other nodes in the graph is computed. The edges must all have non-negative edge weights. Dijkstra\'s could be used to model shortest travel time between friend\'s houses with your house as a starting point. </string>

    <string name="LevenshteinDescription">The Levenshtein distance algorithm is an O(m * n) algorithm where m and n are the lengths of the strings being compared. This algorithm computes the minimum edit (insertion, deletion, or substitution) cost of changing one string into another string. In our example, we use 1 as the cost of insertion or deletion and 2 as the cost of substitution. If the character being substituted is the same, then we use 0 as the substitution value. </string>

    <!-- Main Page Information and Title Strings -->
    <string name="SearchSortTitle">Searching \&amp; Sorting </string>

    <string name="GraphTitle">Graph</string>

    <string name="GreedyTitle">Greedy</string>

    <string name="DPTitle">Dynamic Programming</string>

    <string name="SearchingSortInformation">Algorithm(s) Covered: \n\t - Linear Search \n\t - Binary Search \n\t - Bubble Sort \n\t - Insertion Sort \n\t - Selection Sort \n\t - Merge Sort \n\t - Quicksort \n\n
       Resources on Big-O Notation/Algorithms: \n\n "https://www.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation" \n and \n https://www.khanacademy.org/computing/computer-science/algorithms \n </string>

    <string name="GraphInformation">Algorithm(s) Covered: \n\t - Depth-First Search \n\t - Breadth-First Search \n\t - Topological Ordering \n\n
       Resources on Graph Terminology and Representations: \n\n http://www.csl.mtu.edu/cs2321/www/newLectures/24_Graph_Terminology.html \n and \n https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs \n </string>

    <string name="GreedyInformation">Algorithm(s) Covered: \n\t - Dijkstra\'s Shortest Path \n\t Algorithm \n\n
       Resources on Greedy Algorithm Approach: \n\n https://www.hackerearth.com/practice/algorithms/greedy/basics-of-greedy-algorithms/tutorial/ \n and \n https://brilliant.org/wiki/greedy-algorithm/ \n </string>

    <string name="DPInformation">Algorithm(s) Covered: \n\t - Levenshtein Distance Algorithm \n\n
       Resources on Dynamic Programming Algorithm Approach: \n\n https://www.hackerearth.com/practice/algorithms/dynamic-programming/introduction-to-dynamic-programming-1/tutorial/ \n and \n https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/ \n </string>

</resources>
